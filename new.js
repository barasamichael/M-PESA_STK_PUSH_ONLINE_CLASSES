document.addEventListener('DOMContentLoaded', function() { const paymentButton = document.querySelector('#makePayment'); const loadingButton = document.querySelector('#loadingButton'); const toastContainer = document.querySelector('#toast-container'); const phoneInput = document.querySelector('#phone'); const amountInput = document.querySelector('#amount'); function createToast(message, type = 'error') { const toast = document.createElement('div'); toast.className = `mb-4 p-4 rounded-lg shadow-lg transform transition-all duration-300 ease-in-out ${ type === 'error' ? 'bg-red-100 border-red-400 text-red-700' : 'bg-green-100 border-green-400 text-green-700' }`; toast.innerHTML = ` <div class="flex items-center"> <div class="flex-shrink-0"> ${type === 'error' ?  '<svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor"><path d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"/></svg>' : '<svg class="h-5 w-5 text-green-400" viewBox="0 0 20 20" fill="currentColor"><path d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"/></svg>' } </div> <div class="ml-3"> <p class="text-sm font-medium">${message}</p> </div> <div class="ml-auto pl-3"> <button class="inline-flex text-gray-400 hover:text-gray-500 focus:outline-none"> <svg class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor" onclick="this.parentElement.parentElement.parentElement.remove()"> <path d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"/> </svg> </button> </div> </div> `; toastContainer.appendChild(toast); setTimeout(() => { toast.classList.add('opacity-0'); setTimeout(() => toast.remove(), 300); }, 5000); } function formatPhoneNumber(phone) { phone = phone.replace(/\D/g, ''); if (phone.startsWith('254')) { return phone; } else if (phone.startsWith('0')) { return '254' + phone.slice(1); } else if (phone.startsWith('+254')) { return phone.slice(1); } return phone; } function validatePhone(phone) { const regex = /^254[17][0-9]{8}$/; return regex.test(phone); } phoneInput.addEventListener('input', function(e) { let formattedNumber = formatPhoneNumber(e.target.value); e.target.value = formattedNumber; }); paymentButton.addEventListener('click', () => { const phoneNumber = formatPhoneNumber(phoneInput.value.trim()); const amount = parseInt(amountInput.value); if (amount < 50) { createToast('Minimum amount is 50 shillings', 'error'); return; } paymentButton.classList.add('hidden'); loadingButton.classList.remove('hidden'); const userId = document.querySelector('#userId').value; const auctionId = document.querySelector('#auctionId').value; const data = { phoneNumber, amount, userId, auctionId }; fetch(`${server_name}account/payment/stk-push`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', }, body: JSON.stringify(data) }) .then(response => response.json()) .then(data => { if (data.message) { createToast(data.message, 'success'); return checkStatus(data.checkoutRequestId); } if (data.error) { createToast(data.error, 'error'); } loadingButton.classList.add('hidden'); paymentButton.classList.remove('hidden'); }) .catch(error => { createToast('Transaction failed. Try again later', 'error'); loadingButton.classList.add('hidden'); paymentButton.classList.remove('hidden'); }); }); function checkStatus(checkoutRequestId) { function queryStatus() { return fetch(`${server_name}account/payment/stk-query`, { method: 'POST', headers: { 'Content-Type': 'application/json', 'Accept': 'application/json', }, body: JSON.stringify({ checkoutRequestId }) }); } function processStatus(statusData) { if (statusData.error) { createToast(statusData.error, 'error'); } if (statusData.message) { createToast(statusData.message, 'success'); loadingButton.classList.add('hidden'); paymentButton.classList.remove('hidden'); setTimeout(() => { window.location.reload(); }, 2000); } else { return new Promise(resolve => setTimeout(resolve, 5000)) .then(queryStatus) .then(response => response.json()) .then(processStatus) .catch(error => { createToast('An unexpected error occurred while checking the transaction status', 'error'); }); } } return queryStatus() .then(response => response.json()) .then(processStatus) .catch(error => { createToast('An unexpected error occurred while checking the transaction status', 'error'); }); } });
